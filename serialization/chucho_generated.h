// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_CHUCHO_CHUCHO_FLATBUFFERS_H_
#define FLATBUFFERS_GENERATED_CHUCHO_CHUCHO_FLATBUFFERS_H_

#include "flatbuffers/flatbuffers.h"

namespace chucho {
namespace flatbuffers {

struct log_events;

struct log_event;

struct log_events FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_EVENTS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<log_event>> *events() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<log_event>> *>(VT_EVENTS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_EVENTS) &&
           verifier.Verify(events()) &&
           verifier.VerifyVectorOfTables(events()) &&
           verifier.EndTable();
  }
};

struct log_eventsBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_events(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<log_event>>> events) {
    fbb_.AddOffset(log_events::VT_EVENTS, events);
  }
  log_eventsBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  log_eventsBuilder &operator=(const log_eventsBuilder &);
  flatbuffers::Offset<log_events> Finish() {
    const auto end = fbb_.EndTable(start_, 1);
    auto o = flatbuffers::Offset<log_events>(end);
    return o;
  }
};

inline flatbuffers::Offset<log_events> Createlog_events(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<log_event>>> events = 0) {
  log_eventsBuilder builder_(_fbb);
  builder_.add_events(events);
  return builder_.Finish();
}

inline flatbuffers::Offset<log_events> Createlog_eventsDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<flatbuffers::Offset<log_event>> *events = nullptr) {
  return chucho::flatbuffers::Createlog_events(
      _fbb,
      events ? _fbb.CreateVector<flatbuffers::Offset<log_event>>(*events) : 0);
}

struct log_event FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_FORMATTED_MESSAGE = 4,
    VT_SECONDS_SINCE_EPOCH = 6,
    VT_FILE_NAME = 8,
    VT_LINE_NUMBER = 10,
    VT_FUNCTION_NAME = 12,
    VT_LOGGER = 14,
    VT_LEVEL_NAME = 16,
    VT_MARKER = 18,
    VT_THREAD = 20
  };
  const flatbuffers::String *formatted_message() const {
    return GetPointer<const flatbuffers::String *>(VT_FORMATTED_MESSAGE);
  }
  uint64_t seconds_since_epoch() const {
    return GetField<uint64_t>(VT_SECONDS_SINCE_EPOCH, 0);
  }
  const flatbuffers::String *file_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FILE_NAME);
  }
  uint32_t line_number() const {
    return GetField<uint32_t>(VT_LINE_NUMBER, 0);
  }
  const flatbuffers::String *function_name() const {
    return GetPointer<const flatbuffers::String *>(VT_FUNCTION_NAME);
  }
  const flatbuffers::String *logger() const {
    return GetPointer<const flatbuffers::String *>(VT_LOGGER);
  }
  const flatbuffers::String *level_name() const {
    return GetPointer<const flatbuffers::String *>(VT_LEVEL_NAME);
  }
  const flatbuffers::String *marker() const {
    return GetPointer<const flatbuffers::String *>(VT_MARKER);
  }
  const flatbuffers::String *thread() const {
    return GetPointer<const flatbuffers::String *>(VT_THREAD);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_FORMATTED_MESSAGE) &&
           verifier.Verify(formatted_message()) &&
           VerifyField<uint64_t>(verifier, VT_SECONDS_SINCE_EPOCH) &&
           VerifyOffset(verifier, VT_FILE_NAME) &&
           verifier.Verify(file_name()) &&
           VerifyField<uint32_t>(verifier, VT_LINE_NUMBER) &&
           VerifyOffset(verifier, VT_FUNCTION_NAME) &&
           verifier.Verify(function_name()) &&
           VerifyOffset(verifier, VT_LOGGER) &&
           verifier.Verify(logger()) &&
           VerifyOffset(verifier, VT_LEVEL_NAME) &&
           verifier.Verify(level_name()) &&
           VerifyOffset(verifier, VT_MARKER) &&
           verifier.Verify(marker()) &&
           VerifyOffset(verifier, VT_THREAD) &&
           verifier.Verify(thread()) &&
           verifier.EndTable();
  }
};

struct log_eventBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_formatted_message(flatbuffers::Offset<flatbuffers::String> formatted_message) {
    fbb_.AddOffset(log_event::VT_FORMATTED_MESSAGE, formatted_message);
  }
  void add_seconds_since_epoch(uint64_t seconds_since_epoch) {
    fbb_.AddElement<uint64_t>(log_event::VT_SECONDS_SINCE_EPOCH, seconds_since_epoch, 0);
  }
  void add_file_name(flatbuffers::Offset<flatbuffers::String> file_name) {
    fbb_.AddOffset(log_event::VT_FILE_NAME, file_name);
  }
  void add_line_number(uint32_t line_number) {
    fbb_.AddElement<uint32_t>(log_event::VT_LINE_NUMBER, line_number, 0);
  }
  void add_function_name(flatbuffers::Offset<flatbuffers::String> function_name) {
    fbb_.AddOffset(log_event::VT_FUNCTION_NAME, function_name);
  }
  void add_logger(flatbuffers::Offset<flatbuffers::String> logger) {
    fbb_.AddOffset(log_event::VT_LOGGER, logger);
  }
  void add_level_name(flatbuffers::Offset<flatbuffers::String> level_name) {
    fbb_.AddOffset(log_event::VT_LEVEL_NAME, level_name);
  }
  void add_marker(flatbuffers::Offset<flatbuffers::String> marker) {
    fbb_.AddOffset(log_event::VT_MARKER, marker);
  }
  void add_thread(flatbuffers::Offset<flatbuffers::String> thread) {
    fbb_.AddOffset(log_event::VT_THREAD, thread);
  }
  log_eventBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  log_eventBuilder &operator=(const log_eventBuilder &);
  flatbuffers::Offset<log_event> Finish() {
    const auto end = fbb_.EndTable(start_, 9);
    auto o = flatbuffers::Offset<log_event>(end);
    return o;
  }
};

inline flatbuffers::Offset<log_event> Createlog_event(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> formatted_message = 0,
    uint64_t seconds_since_epoch = 0,
    flatbuffers::Offset<flatbuffers::String> file_name = 0,
    uint32_t line_number = 0,
    flatbuffers::Offset<flatbuffers::String> function_name = 0,
    flatbuffers::Offset<flatbuffers::String> logger = 0,
    flatbuffers::Offset<flatbuffers::String> level_name = 0,
    flatbuffers::Offset<flatbuffers::String> marker = 0,
    flatbuffers::Offset<flatbuffers::String> thread = 0) {
  log_eventBuilder builder_(_fbb);
  builder_.add_seconds_since_epoch(seconds_since_epoch);
  builder_.add_thread(thread);
  builder_.add_marker(marker);
  builder_.add_level_name(level_name);
  builder_.add_logger(logger);
  builder_.add_function_name(function_name);
  builder_.add_line_number(line_number);
  builder_.add_file_name(file_name);
  builder_.add_formatted_message(formatted_message);
  return builder_.Finish();
}

inline flatbuffers::Offset<log_event> Createlog_eventDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *formatted_message = nullptr,
    uint64_t seconds_since_epoch = 0,
    const char *file_name = nullptr,
    uint32_t line_number = 0,
    const char *function_name = nullptr,
    const char *logger = nullptr,
    const char *level_name = nullptr,
    const char *marker = nullptr,
    const char *thread = nullptr) {
  return chucho::flatbuffers::Createlog_event(
      _fbb,
      formatted_message ? _fbb.CreateString(formatted_message) : 0,
      seconds_since_epoch,
      file_name ? _fbb.CreateString(file_name) : 0,
      line_number,
      function_name ? _fbb.CreateString(function_name) : 0,
      logger ? _fbb.CreateString(logger) : 0,
      level_name ? _fbb.CreateString(level_name) : 0,
      marker ? _fbb.CreateString(marker) : 0,
      thread ? _fbb.CreateString(thread) : 0);
}

inline const chucho::flatbuffers::log_events *Getlog_events(const void *buf) {
  return flatbuffers::GetRoot<chucho::flatbuffers::log_events>(buf);
}

inline bool Verifylog_eventsBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<chucho::flatbuffers::log_events>(nullptr);
}

inline void Finishlog_eventsBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<chucho::flatbuffers::log_events> root) {
  fbb.Finish(root);
}

}  // namespace flatbuffers
}  // namespace chucho

#endif  // FLATBUFFERS_GENERATED_CHUCHO_CHUCHO_FLATBUFFERS_H_
